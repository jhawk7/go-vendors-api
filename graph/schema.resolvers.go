package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/jhawk7/go-vendors-api/graph/model"
	"github.com/jhawk7/go-vendors-api/pkg/db"
	log "github.com/sirupsen/logrus"
)

var dbClient db.DBClient

// CreateVendor is the resolver for the createVendor field.
func (r *mutationResolver) CreateVendor(ctx context.Context, input *model.NewVendor) (*model.Vendor, error) {
	var mVendor *model.Vendor
	var dbVendor db.Vendor

	if reflect.DeepEqual(dbClient, db.DBClient{}) {
		getDBConn()
	}

	b, bErr := json.Marshal(input)
	if bErr != nil {
		errorHandler(bErr, false)
		return mVendor, bErr
	}

	if jsonErr := json.Unmarshal(b, &dbVendor); jsonErr != nil {
		errorHandler(jsonErr, false)
		return mVendor, jsonErr
	}

	if dbErr := dbClient.CreateVendor(&dbVendor); dbErr != nil {
		errorHandler(dbErr, false)
		return mVendor, dbErr
	}

	vb, vbErr := json.Marshal(dbVendor)
	if vbErr != nil {
		errorHandler(vbErr, false)
		return mVendor, vbErr
	}

	if vjsonErr := json.Unmarshal(vb, &mVendor); vjsonErr != nil {
		errorHandler(vjsonErr, false)
		return mVendor, vjsonErr
	}

	return mVendor, nil

}

// GetVendors is the resolver for the getVendors field.
func (r *queryResolver) GetVendors(ctx context.Context) ([]*model.Vendor, error) {
	var mVendors []*model.Vendor
	if reflect.DeepEqual(dbClient, db.DBClient{}) {
		getDBConn()
	}

	vendors, vErr := dbClient.GetActiveVendors()
	if vErr != nil {
		errorHandler(vErr, false)
		return mVendors, vErr
	}

	b, bErr := json.Marshal(vendors)
	if bErr != nil {
		errorHandler(bErr, false)
		return mVendors, bErr
	}

	if jsonErr := json.Unmarshal(b, &mVendors); jsonErr != nil {
		errorHandler(jsonErr, false)
		return mVendors, jsonErr
	}

	return mVendors, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func getDBConn() {
	if client, err := db.InitDB(); err != nil {
		panic(fmt.Errorf("failed to connect to db; [error: %v]", err))
	} else {
		dbClient = client
	}
}

func errorHandler(err error, fatal bool) {
	if err != nil {
		log.Error(fmt.Errorf("error: %v", err))

		if fatal {
			panic(err)
		}
	}
}
